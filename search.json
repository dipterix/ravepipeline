[{"path":"http://dipterix.org/ravepipeline/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024-2025 ravepipeline authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://dipterix.org/ravepipeline/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhengjia Wang. Author, maintainer, copyright holder. John Magnotti. Contributor, researcher. Xiang Zhang. Contributor, researcher. Michael Beauchamp. Contributor, researcher. Trustees University Pennsylvania. Copyright holder.           Copyright Holder","code":""},{"path":"http://dipterix.org/ravepipeline/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magnotti, J. F., Wang, Z., & Beauchamp, M. S. (2020). RAVE: Comprehensive open-source software reproducible analysis visualization intracranial EEG data. NeuroImage, 223, 117341.","code":"@Article{,   title = {{RAVE}: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data},   author = {John F. Magnotti and Zhengjia Wang and Michael S. Beauchamp},   journal = {NeuroImage},   year = {2020},   volume = {223},   pages = {117341},   doi = {10.1016/j.neuroimage.2020.117341}, }"},{"path":"http://dipterix.org/ravepipeline/index.html","id":"ravepipeline","dir":"","previous_headings":"","what":"Reproducible Pipeline Infrastructure for Neuroscience","title":"Reproducible Pipeline Infrastructure for Neuroscience","text":"goal ravepipeline provide pipeline infrastructure Reproducible Analysis Visualization Intracranial Electroencephalography (RAVE). package defines high-level class build, compile, set, execute, share neuroscience pipelines. R Python supported Markdown shiny dashboard templates extending building customized pipelines. offers several built-pipelines, see repository rave-ieeg/rave-pipelines details. documentation available rave.wiki","code":""},{"path":"http://dipterix.org/ravepipeline/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reproducible Pipeline Infrastructure for Neuroscience","text":"Please check full installation guide install ‘RAVE’ full features, please install additional packages:","code":"# install.packages(c(\"remotes\", \"visNetwork\", \"rpymat\"))  # Install development version remotes::install_github(\"dipterix/ravepipeline\")  # Download built-in pipelines ravepipeline::ravepipeline_finalize_installation()  # Configure Python environment if needed rpymat::configure_conda()"},{"path":"http://dipterix.org/ravepipeline/index.html","id":"run-analysis-pipelines","dir":"","previous_headings":"","what":"Run analysis pipelines","title":"Reproducible Pipeline Infrastructure for Neuroscience","text":"example requires download RAVE demo data, comes full installations. built-pipelines include Power Explorer, powerful tool group stimuli time-frequency analysis visualization. ’s example use demo data set: https://github.com/user-attachments/assets/75fe0f88-58ca-46ee-a831-f22abbaa5343","code":"library(ravepipeline)  # list all the pipelines pipeline_list()  # Run power explorer power_explorer <- pipeline(\"power_explorer\")  # List all runnable pipeline targets power_explorer$target_table  # set inputs for analysis power_explorer$set_settings(   project_name = \"demo\",    subject_code = \"DemoSubject\",    loaded_electrodes = \"13-16,24\",    epoch_choice = \"auditory_onset\",    epoch_choice__trial_starts = -1L,    epoch_choice__trial_ends = 2L,    reference_name = \"default\",    baseline_settings = list(     window = list(c(-1, -0.5)),     scope = \"Per frequency, trial, and electrode\",      unit_of_analysis = \"decibel\"),    analysis_electrodes = \"14\",    first_condition_groupings = list(     list(label = \"audio_visual\", conditions = c(\"known_av\", \"meant_av\", \"last_av\", \"drive_av\")),     list(label = \"auditory_only\", conditions = c(\"last_a\", \"drive_a\", \"known_a\", \"meant_a\")),      list(label = \"visual_only\", conditions = c(\"last_v\", \"drive_v\", \"known_v\", \"meant_v\"))),    condition_variable = \"Condition\",    analysis_settings = list(     list(label = \"AudStart\", event = \"Trial Onset\",           time = 0:1, frequency = c(70L, 150L))),   enable_second_condition_groupings = FALSE,    enable_custom_ROI = FALSE,    omnibus_includes_all_electrodes = TRUE )   # Run pipeline to obtain the power of frequency over time time_freq_data <- power_explorer$run(\"by_frequency_over_time_data\")  # Load up custom pipeline functions pipeline_functions <- power_explorer$shared_env()  # plot the result pipeline_functions$plot_by_frequency_over_time(time_freq_data)  # visualize the results power_explorer$visualize(glimpse = TRUE, aspect_ratio = 10)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect and schedule pipelines — PipelineCollections","title":"Connect and schedule pipelines — PipelineCollections","text":"Experimental, subject change future.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect and schedule pipelines — PipelineCollections","text":"list containing id pipeline ID can used deps pipeline forked pipeline instance target_names copy names depend_on copy deps cue copy cue standalone copy standalone","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Connect and schedule pipelines — PipelineCollections","text":"verbose whether verbose build","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Connect and schedule pipelines — PipelineCollections","text":"root_path path directory contains pipelines scheduler collection_path path pipeline collections pipeline_ids pipeline ID codes","code":""},{"path":[]},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connect and schedule pipelines — PipelineCollections","text":"PipelineCollections$new() PipelineCollections$add_pipeline() PipelineCollections$build_pipelines() PipelineCollections$run() PipelineCollections$get_scheduler()","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connect and schedule pipelines — PipelineCollections","text":"Constructor","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect and schedule pipelines — PipelineCollections","text":"","code":"PipelineCollections$new(root_path = NULL, overwrite = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect and schedule pipelines — PipelineCollections","text":"root_path store pipelines intermediate results overwrite whether overwrite root_path exists","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"method-add-pipeline-","dir":"Reference","previous_headings":"","what":"Method add_pipeline()","title":"Connect and schedule pipelines — PipelineCollections","text":"Add pipeline collection","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect and schedule pipelines — PipelineCollections","text":"","code":"PipelineCollections$add_pipeline(   x,   names = NULL,   deps = NULL,   pre_hook = NULL,   post_hook = NULL,   cue = c(\"always\", \"thorough\", \"never\"),   search_paths = pipeline_root(),   standalone = TRUE,   hook_envir = parent.frame() )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect and schedule pipelines — PipelineCollections","text":"x pipeline name (can found via pipeline_list), PipelineTools names pipeline targets execute deps pipeline IDs depend ; see 'Values' pre_hook function run pipeline; function needs two arguments: input map (can edit -place), path directory allows store temporary files post_hook function run pipeline; function needs two arguments: pipeline object, path directory allows store intermediate results cue whether always run dependence search_paths search pipeline x character; ignored x pipeline object standalone whether pipeline standalone, set TRUE pipeline added multiple times run independently; default true hook_envir look global environments pre_hook post_hook contains global variables; default calling environment","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"method-build-pipelines-","dir":"Reference","previous_headings":"","what":"Method build_pipelines()","title":"Connect and schedule pipelines — PipelineCollections","text":"Build pipelines visualize","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect and schedule pipelines — PipelineCollections","text":"","code":"PipelineCollections$build_pipelines(visualize = TRUE)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect and schedule pipelines — PipelineCollections","text":"visualize whether visualize pipeline; default true","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Connect and schedule pipelines — PipelineCollections","text":"Run collection pipelines","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect and schedule pipelines — PipelineCollections","text":"","code":"PipelineCollections$run(   error = c(\"error\", \"warning\", \"ignore\"),   .scheduler = c(\"none\", \"future\", \"clustermq\"),   .type = c(\"callr\", \"smart\", \"vanilla\"),   .as_promise = FALSE,   .async = FALSE,   rebuild = NA,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect and schedule pipelines — PipelineCollections","text":"error error occurs; default 'error' throwing errors; choices 'warning' 'ignore' .scheduler, .type, .as_promise, .async, ... passed pipeline_run rebuild whether re-build pipeline; default NA ( pipeline built , rebuild)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"method-get-scheduler-","dir":"Reference","previous_headings":"","what":"Method get_scheduler()","title":"Connect and schedule pipelines — PipelineCollections","text":"Get scheduler object","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineCollections.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect and schedule pipelines — PipelineCollections","text":"","code":"PipelineCollections$get_scheduler()"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Class definition for 'RAVE' pipeline results — PipelineResult","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"Class definition 'RAVE' pipeline results Class definition 'RAVE' pipeline results","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"TRUE target finished, FALSE timeout reached","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"progressor progress bar object, usually generated progress instance promise promise instance monitors pipeline progress verbose whether print warning messages names names pipeline build async_callback function callback call check loop; used pipeline running async=TRUE mode check_interval used async=TRUE pipeline_run, interval seconds check progress","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"variables target variables pipeline variable_descriptions readable descriptions target variables valid logical true false whether result instance invalidated status result status, possible status 'initialize', 'running', 'finished', 'canceled', 'errored'. Note 'finished' means pipeline process finished. process (read-) process object pipeline running 'async' mode, NULL; see r_bg.","code":""},{"path":[]},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"PipelineResult$validate() PipelineResult$invalidate() PipelineResult$get_progress() PipelineResult$new() PipelineResult$run() PipelineResult$await() PipelineResult$print() PipelineResult$get_values() PipelineResult$clone()","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"check result valid, raises errors invalidated","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$validate()"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-invalidate-","dir":"Reference","previous_headings":"","what":"Method invalidate()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"invalidate pipeline result","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$invalidate()"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-get-progress-","dir":"Reference","previous_headings":"","what":"Method get_progress()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"get pipeline progress","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$get_progress()"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"constructor (internal)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$new(path = character(0L), verbose = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"path pipeline path verbose whether print warnings","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"run pipeline (internal)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$run(   expr,   env = parent.frame(),   quoted = FALSE,   async = FALSE,   process = NULL )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"expr expression evaluate env environment expr quoted whether expr quoted async whether process runs sessions process process object inherits process, inferred expr process=NULL, raise errors found","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-await-","dir":"Reference","previous_headings":"","what":"Method await()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"wait targets get finished","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$await(names = NULL, timeout = Inf)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"names target names wait, default NULL, .e. wait targets scheduled timeout maximum waiting time seconds","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"print method","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$print()"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-get-values-","dir":"Reference","previous_headings":"","what":"Method get_values()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"get results","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$get_values(names = NULL, ...)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"names target names read ... passed pipeline_read","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"objects class cloneable method.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"","code":"PipelineResult$clone(deep = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineResult.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipeline results — PipelineResult","text":"deep Whether make deep clone.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":null,"dir":"Reference","previous_headings":"","what":"Class definition for 'RAVE' pipelines — PipelineTools","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"Class definition 'RAVE' pipelines Class definition 'RAVE' pipelines","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"value inputs, list key missing values targets PipelineResult instance as_promise async true; otherwise list values input names environment shared variables See type table progress Nothing ancestor target names (including names) new pipeline object based path given new pipeline object based path given saved file path data file found default value list key-value pairs list preferences. simplify true length keys 1, returns value preference logical whether keys exist","code":""},{"path":[]},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"description pipeline description settings_path absolute path settings file extdata_path absolute path user-defined pipeline data folder preference_path directory pipeline preference folder target_table table target names descriptions result_table summary results, including signatures data commands pipeline_path absolute path pipeline pipeline_name code name pipeline","code":""},{"path":[]},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"PipelineTools$new() PipelineTools$set_settings() PipelineTools$get_settings() PipelineTools$read() PipelineTools$run() PipelineTools$eval() PipelineTools$shared_env() PipelineTools$python_module() PipelineTools$progress() PipelineTools$attach() PipelineTools$visualize() PipelineTools$target_ancestors() PipelineTools$fork() PipelineTools$fork_to_subject() PipelineTools$with_activated() PipelineTools$clean() PipelineTools$save_data() PipelineTools$load_data() PipelineTools$set_preferences() PipelineTools$get_preferences() PipelineTools$has_preferences() PipelineTools$clone()","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"construction function","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$new(   pipeline_name,   settings_file = \"settings.yaml\",   paths = pipeline_root(),   temporary = FALSE )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"pipeline_name name pipeline, usually pipeline 'DESCRIPTION' file, pipeline folder name settings_file file name settings file, user inputs stored paths paths find pipeline, usually parent folder pipeline; default pipeline_root() temporary whether save paths current pipeline root registry. Set TRUE importing pipelines subject pipeline folders","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-set-settings-","dir":"Reference","previous_headings":"","what":"Method set_settings()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"set inputs","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$set_settings(..., .list = NULL)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"..., .list named list inputs; inputs named, otherwise errors raised","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-get-settings-","dir":"Reference","previous_headings":"","what":"Method get_settings()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"get current inputs","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$get_settings(key, default = NULL, constraint)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"key input name; default missing, .e., get settings default default value found constraint constraint results; input value constraint, first element constraint returned.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-read-","dir":"Reference","previous_headings":"","what":"Method read()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"read intermediate variables","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$read(var_names, ifnotfound = NULL, ...)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"var_names target names, can obtained via x$target_table member; default missing, .e., read intermediate variables ifnotfound variable default value found ... parameters passing pipeline_read","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"run pipeline","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$run(   names = NULL,   async = FALSE,   as_promise = async,   scheduler = c(\"none\", \"future\", \"clustermq\"),   type = c(\"smart\", \"callr\", \"vanilla\"),   envir = new.env(parent = globalenv()),   callr_function = NULL,   return_values = TRUE,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"names pipeline variable names calculate; default calculate targets async whether run asynchronous another process as_promise whether return PipelineResult instance scheduler, type, envir, callr_function, return_values, ... passed pipeline_run as_promise true, otherwise arguments passed pipeline_run_bare","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"run pipeline order; unlike $run(), method use targets infrastructure, hence pipeline results stored, order names respected.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$eval(   names,   env = parent.frame(),   shortcut = FALSE,   clean = TRUE,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"names pipeline variable names calculate; must specified env environment evaluate store results shortcut logical characters; default FALSE, meaning names dependencies (missing env) evaluated; set TRUE names evaluated. shortcut character vector, list targets (including ancestors) whose values can assumed --date, evaluation targets can skipped. clean whether evaluate without polluting env ... passed pipeline_eval","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-shared-env-","dir":"Reference","previous_headings":"","what":"Method shared_env()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"run pipeline shared library scripts starting path R/shared","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$shared_env(callr_function = callr::r)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"callr_function either callr::r NULL; callr::r, environment loaded isolated R session serialized back main session avoid contaminating main session environment; NULL, code sourced directly current environment.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-python-module-","dir":"Reference","previous_headings":"","what":"Method python_module()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"get 'Python' module embedded pipeline","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$python_module(   type = c(\"info\", \"module\", \"shared\", \"exist\"),   must_work = TRUE )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"type return type, choices 'info' (get basic information module path, default), 'module' (load module return ), 'shared' (load shared sub-module module, shared also report script), 'exist' (returns true false whether module exists ) must_work whether module needs existed . TRUE, raise errors module exist; default TRUE, ignored type 'exist'.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-progress-","dir":"Reference","previous_headings":"","what":"Method progress()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"get progress pipeline","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$progress(method = c(\"summary\", \"details\"))"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"method either 'summary' 'details'","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-attach-","dir":"Reference","previous_headings":"","what":"Method attach()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"attach pipeline tool environment (internally used)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$attach(env)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"env environment","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-visualize-","dir":"Reference","previous_headings":"","what":"Method visualize()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"visualize pipeline target dependency graph","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$visualize(   glimpse = FALSE,   aspect_ratio = 2,   node_size = 30,   label_size = 40,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"glimpse whether glimpse graph network render state aspect_ratio controls node spacing node_size, label_size size nodes node labels ... passed pipeline_visualize","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-target-ancestors-","dir":"Reference","previous_headings":"","what":"Method target_ancestors()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"helper function get target ancestors","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$target_ancestors(names, skip_names = NULL)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"names targets whose ancestor targets need queried skip_names targets assumed --date, hence excluded, notice exclusion recursive, means skip_names excluded, also ancestors excluded result.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-fork-","dir":"Reference","previous_headings":"","what":"Method fork()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"fork (copy) current pipeline new directory","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$fork(path, policy = \"default\")"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"path path new pipeline, folder created policy fork policy defined module author, see text file 'fork-policy' pipeline directory; missing, default avoid copying main.html shared folder","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-fork-to-subject-","dir":"Reference","previous_headings":"","what":"Method fork_to_subject()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"fork (copy) current pipeline 'RAVE' subject","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$fork_to_subject(   subject,   label = \"NA\",   policy = \"default\",   delete_old = FALSE,   sanitize = TRUE )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"subject subject ID instance pipeline saved label pipeline label describing pipeline policy fork policy defined module author, see text file 'fork-policy' pipeline directory; missing, default avoid copying main.html shared folder delete_old whether delete old pipelines label default false sanitize whether sanitize registry save. remove missing folders import manually copied pipelines registry (pipelines name)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-with-activated-","dir":"Reference","previous_headings":"","what":"Method with_activated()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"run code pipeline activated, environment variables function behaviors might change condition (example, targets package functions)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$with_activated(expr, quoted = FALSE, env = parent.frame())"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"expr expression evaluate quoted whether expr quoted; default false env environment run expr","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-clean-","dir":"Reference","previous_headings":"","what":"Method clean()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"clean part data store","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$clean(   destroy = c(\"all\", \"cloud\", \"local\", \"meta\", \"process\", \"preferences\", \"progress\",     \"objects\", \"scratch\", \"workspaces\"),   ask = FALSE )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"destroy, ask see tar_destroy","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-save-data-","dir":"Reference","previous_headings":"","what":"Method save_data()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"save data pipeline data folder","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$save_data(   data,   name,   format = c(\"json\", \"yaml\", \"csv\", \"fst\", \"rds\"),   overwrite = FALSE,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"data R object name name data save, must start letters format serialize format, choices 'json', 'yaml', 'csv', 'fst', 'rds'; default 'json'. save arbitrary objects functions environments, use 'rds' overwrite whether overwrite existing files; default ... passed saver functions","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-load-data-","dir":"Reference","previous_headings":"","what":"Method load_data()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"load data pipeline data folder","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$load_data(   name,   error_if_missing = TRUE,   default_if_missing = NULL,   format = c(\"auto\", \"json\", \"yaml\", \"csv\", \"fst\", \"rds\"),   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"name name data error_if_missing whether raise errors name missing default_if_missing default values return name missing format format data, default automatically obtained file extension ... passed loader functions","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-set-preferences-","dir":"Reference","previous_headings":"","what":"Method set_preferences()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"set persistent preferences pipeline. preferences affect pipeline working, hence usually stores minor variables graphic options. Changing preferences invalidate pipeline cache.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$set_preferences(..., .list = NULL)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"..., .list key-value pairs initial preference values. keys must start 'global' module ID, followed dot preference type names. example 'global.graphics.continuous_palette' setting palette colors continuous heat-map; \"global\" means settings applied 'RAVE' modules. module-level preference, 'power_explorer.export.default_format' sets default format power-explorer export dialogue. name preference name, must contain letters, digits, underscore, hyphen, coerced lower case (case-insensitive)","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-get-preferences-","dir":"Reference","previous_headings":"","what":"Method get_preferences()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"get persistent preferences pipeline.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$get_preferences(   keys,   simplify = TRUE,   ifnotfound = NULL,   validator = NULL,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"keys characters get preferences simplify whether simplify results length key 1; default true; set false always return list preferences ifnotfound default value key missing validator NULL function validate values; see 'Examples' ... passed validator validator function","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"library(ravepipeline) if(interactive() && length(pipeline_list()) > 0) {   pipeline <- pipeline(\"power_explorer\")    # set dummy preference   pipeline$set_preferences(\"global.example.dummy_preference\" = 1:3)    # get preference   pipeline$get_preferences(\"global.example.dummy_preference\")    # get preference with validator to ensure the value length to be 1   pipeline$get_preferences(     \"global.example.dummy_preference\",     validator = function(value) {       stopifnot(length(value) == 1)     },     ifnotfound = 100   )    pipeline$has_preferences(\"global.example.dummy_preference\") }"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-has-preferences-","dir":"Reference","previous_headings":"","what":"Method has_preferences()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"whether pipeline preference keys","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$has_preferences(keys, ...)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"keys characters name preferences ... passed internal methods","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"objects class cloneable method.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"PipelineTools$clone(deep = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"deep Whether make deep clone.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/PipelineTools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class definition for 'RAVE' pipelines — PipelineTools","text":"","code":"## ------------------------------------------------ ## Method `PipelineTools$get_preferences` ## ------------------------------------------------   library(ravepipeline) if(interactive() && length(pipeline_list()) > 0) {   pipeline <- pipeline(\"power_explorer\")    # set dummy preference   pipeline$set_preferences(\"global.example.dummy_preference\" = 1:3)    # get preference   pipeline$get_preferences(\"global.example.dummy_preference\")    # get preference with validator to ensure the value length to be 1   pipeline$get_preferences(     \"global.example.dummy_preference\",     validator = function(value) {       stopifnot(length(value) == 1)     },     ifnotfound = 100   )    pipeline$has_preferences(\"global.example.dummy_preference\") }"},{"path":"http://dipterix.org/ravepipeline/reference/install_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Install 'RAVE' modules — install_modules","title":"Install 'RAVE' modules — install_modules","text":"Low-level function exported -stream 'RAVE' packages.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/install_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install 'RAVE' modules — install_modules","text":"","code":"install_modules(modules, dependencies = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/install_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install 'RAVE' modules — install_modules","text":"modules vector characters, repository names; default automatically determined public registry dependencies whether update dependent packages; default false","code":""},{"path":"http://dipterix.org/ravepipeline/reference/install_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install 'RAVE' modules — install_modules","text":"nothing","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new 'RAVE' (2.0) module to current project — module_add","title":"Add new 'RAVE' (2.0) module to current project — module_add","text":"Creates 'RAVE' pipeline additional dashboard module template.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new 'RAVE' (2.0) module to current project — module_add","text":"","code":"module_add(   module_id,   module_label,   path = \".\",   type = c(\"default\", \"bare\", \"scheduler\", \"python\"),   ...,   pipeline_name = module_id,   overwrite = FALSE )"},{"path":"http://dipterix.org/ravepipeline/reference/module_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new 'RAVE' (2.0) module to current project — module_add","text":"module_id module ID create, must unique; users install two modules identical module ID. recommend module ID follows snake format, starting lab name, example, 'beauchamplab_imaging_preprocess', 'karaslab_freez', 'upenn_ese25_fooof'. module_label friendly label display dashboard path project root path; default current directory type template choose, options 'default' 'bare' ... additional configurations module 'order', 'group', 'badge' pipeline_name pipeline name create along module; default identical module_id (strongly recommended); leave default unless know . overwrite whether overwrite existing module module ID exists; default false","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new 'RAVE' (2.0) module to current project — module_add","text":"Nothing.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new 'RAVE' (2.0) module to current project — module_add","text":"","code":"# For demonstrating this example only project_root <- tempfile() dir.create(project_root, showWarnings = FALSE, recursive = TRUE)   # Add a module module_id <- \"mylab_my_first_module\" module_add(   module_id = module_id,   module_label = \"My Pipeline\",   path = project_root )   # show the structure cat(   list.files(     project_root,     recursive = TRUE,     full.names = FALSE,     include.dirs = TRUE   ),   sep = \"\\n\" ) #> modules #> modules.yaml #> modules/mylab_my_first_module #> modules/mylab_my_first_module/DESCRIPTION #> modules/mylab_my_first_module/R #> modules/mylab_my_first_module/R/aa.R #> modules/mylab_my_first_module/R/aaa-presets.R #> modules/mylab_my_first_module/R/loader.R #> modules/mylab_my_first_module/R/module_html.R #> modules/mylab_my_first_module/R/module_server.R #> modules/mylab_my_first_module/R/shared-scripts.R #> modules/mylab_my_first_module/_targets.yaml #> modules/mylab_my_first_module/common.R #> modules/mylab_my_first_module/configure.R #> modules/mylab_my_first_module/debug.R #> modules/mylab_my_first_module/fork-policy #> modules/mylab_my_first_module/main.Rmd #> modules/mylab_my_first_module/make-main.R #> modules/mylab_my_first_module/migrate.R #> modules/mylab_my_first_module/module-ui.html #> modules/mylab_my_first_module/server.R #> modules/mylab_my_first_module/settings.yaml  unlink(project_root, recursive = TRUE)"},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"'RAVE' module registry — module_registry","title":"'RAVE' module registry — module_registry","text":"Create, view, reserve module registry","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'RAVE' module registry — module_registry","text":"","code":"module_registry(   title,   repo,   modules,   authors,   url = sprintf(\"https://github.com/%s\", repo) )  module_registry2(repo, description)  get_modules_registries(update = NA)  get_module_description(path)  add_module_registry(title, repo, modules, authors, url, dry_run = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'RAVE' module registry — module_registry","text":"title title registry, usually identical description title 'DESCRIPTION' RAVE-CONFIG file repo 'Github' repository modules characters module ID, must contain letters, digits, underscore, dash; must duplicated existing registered modules authors list module authors; must one one author 'cre' role (see person). author considered maintainer, charge editing registry url web address repository update whether force updating registry path, description path 'DESCRIPTION' RAVE-CONFIG file dry_run whether generate preview message content instead opening email link","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'RAVE' module registry — module_registry","text":"registry object, list registries","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'RAVE' module registry — module_registry","text":"'RAVE' registry contains following data entries: repository title, name, 'URL', authors, list module IDs. 'RAVE' requires module must use unique module ID. cause issue two modules share ID. Therefore 'RAVE' maintains public registry list module maintainers can register module ID prevent people using . register module ID, please use add_module_registry validate send email 'RAVE' development team.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/module_registry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'RAVE' module registry — module_registry","text":"","code":"library(ravepipeline)  # create your own registry module_registry(   repo = \"rave-ieeg/rave-pipelines\",   title = \"A Collection of 'RAVE' Builtin Pipelines\",   authors = list(     list(\"Zhengjia\", \"Wang\", role = c(\"cre\", \"aut\"),          email = \"dipterix@rave.wiki\")   ),   modules = \"brain_viewer\" ) #> [RAVE Registry] #>   Title: A Collection of 'RAVE' Builtin Pipelines #>   Repository: rave-ieeg/rave-pipelines #>   URL: https://github.com/rave-ieeg/rave-pipelines #>   Maintainer: Zhengjia Wang <dipterix@rave.wiki> [cre, aut] #>   Authors:  #>   - Zhengjia Wang <dipterix@rave.wiki> [cre, aut] #>   Modules: [brain_viewer]   if (FALSE) { # \\dontrun{  # This example will need access to Github and will open an email link  # get current registries get_modules_registries(FALSE)  # If your repository is on Github and RAVE-CONFIG file exists module_registry2(\"rave-ieeg/rave-pipelines\")  # send a request to add your registry registry <- module_registry2(\"rave-ieeg/rave-pipelines\") add_module_registry(registry)  } # }"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline-knitr-markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","title":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","text":"Allows building 'RAVE' pipelines 'rmarkdown' files. Please use 'rmarkdown' scripts . Use pipeline_create_template create example.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline-knitr-markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","text":"","code":"configure_knitr(languages = c(\"R\", \"python\"))  pipeline_setup_rmd(   module_id,   env = parent.frame(),   collapse = TRUE,   comment = \"#>\",   languages = c(\"R\", \"python\"),   project_path = getOption(\"raveio.pipeline.project_root\", default =     rs_active_project(child_ok = TRUE, shiny_ok = TRUE)) )  pipeline_render(   module_id,   ...,   env = new.env(parent = parent.frame()),   entry_file = \"main.Rmd\",   project_path = getOption(\"raveio.pipeline.project_root\", default =     rs_active_project(child_ok = TRUE, shiny_ok = TRUE)) )"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline-knitr-markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","text":"languages one programming languages support; options 'R' 'python' module_id module ID, usually name direct parent folder containing pipeline file env environment set pipeline translator collapse, comment passed set method opts_chunk project_path project path containing pipeline folders, usually active project folder ... passed internal function calls entry_file file compile; default \"main.Rmd\"","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline-knitr-markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","text":"function supposed called later builds pipeline scripts","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline-knitr-markdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure 'rmarkdown' files to build 'RAVE' pipelines — pipeline-knitr-markdown","text":"","code":"configure_knitr(\"R\") #> function (make_file)  #> { #>     rave_knitr_build(targets, make_file) #> } #> <bytecode: 0x5568e78f3de0> #> <environment: 0x5568e78f7890>  if (FALSE) { # \\dontrun{  # Requires to configure Python configure_knitr(\"python\")  # This function must be called in an Rmd file setup block # for example, see # https://rave.wiki/posts/customize_modules/python_module_01.html  pipeline_setup_rmd(\"my_module_id\")  } # }"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates 'RAVE' pipeline instance — pipeline","title":"Creates 'RAVE' pipeline instance — pipeline","text":"Set pipeline inputs, execute, read pipeline outputs","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates 'RAVE' pipeline instance — pipeline","text":"","code":"pipeline(   pipeline_name,   settings_file = \"settings.yaml\",   paths = pipeline_root(),   temporary = FALSE )  pipeline_from_path(path, settings_file = \"settings.yaml\")"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates 'RAVE' pipeline instance — pipeline","text":"pipeline_name name pipeline, usually title field 'DESCRIPTION' file, pipeline folder name (description file missing) settings_file name settings file, usually stores user inputs paths paths search pipeline, usually parent directory pipeline; default pipeline_root, search pipelines installed current working directory. temporary see pipeline_root path pipeline folder","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates 'RAVE' pipeline instance — pipeline","text":"PipelineTools instance","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates 'RAVE' pipeline instance — pipeline","text":"","code":"library(ravepipeline)  if(interactive()) {    # ------------ Set up a bare minimal example pipeline ---------------   root_path <- tempdir()   pipeline_root_folder <- file.path(root_path, \"modules\")    # create pipeline folder   pipeline_path <- pipeline_create_template(     root_path = pipeline_root_folder, pipeline_name = \"raveio_demo\",     overwrite = TRUE, activate = FALSE, template_type = \"rmd-bare\")    # Set initial user inputs   yaml::write_yaml(     x = list(       n = 100,       pch = 16,       col = \"steelblue\"     ),     file = file.path(pipeline_path, \"settings.yaml\")   )    # build the pipeline for the first time   # this is a one-time setup   pipeline_build(pipeline_path)    # Temporarily redirect the pipeline project root   # to `root_path`   old_opt <- options(\"raveio.pipeline.project_root\" = root_path)   # Make sure the options are reset   on.exit({ options(old_opt) })    # Compile the pipeline document   pipeline_render(     module_id = \"raveio_demo\",     project_path = root_path   )    if (FALSE) { # \\dontrun{      # Open web browser to see compiled report     utils::browseURL(file.path(pipeline_path, \"main.html\"))    } # }    # --------------------- Example starts ------------------------    # Load pipeline   pipeline <- pipeline(     pipeline_name = \"raveio_demo\",     paths = pipeline_root_folder,     temporary = TRUE   )    # Check which pipeline targets to run   pipeline$target_table    # Run to `plot_data`, RAVE pipeline will automatically   # calculate which up-stream targets need to be updated   # and evaluate these targets   pipeline$run(\"plot_data\")    # Customize settings   pipeline$set_settings(pch = 2)    # Run again with the new inputs, since input_data does not change,   # the pipeline will skip that target automatically   pipeline$run(\"plot_data\")    # Read intermediate data   head(pipeline$read(\"input_data\"))    # or use `[]` to get results   pipeline[c(\"n\", \"pch\", \"col\")]   pipeline[-c(\"input_data\")]    # Check evaluating status   pipeline$progress(\"details\")    # result summary & cache table   pipeline$result_table    # visualize the target dependency graph   pipeline$visualize(glimpse = TRUE)    # --------------------- Clean up ------------------------   unlink(pipeline_path, recursive = TRUE) }"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine and execute pipelines — pipeline_collection","title":"Combine and execute pipelines — pipeline_collection","text":"Experimental, subject change future.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine and execute pipelines — pipeline_collection","text":"","code":"pipeline_collection(root_path = NULL, overwrite = FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine and execute pipelines — pipeline_collection","text":"root_path directory store pipelines results overwrite whether overwrite root_path exists; default false, raises error root_path exists","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine and execute pipelines — pipeline_collection","text":"PipelineCollections instance","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install 'RAVE' pipelines — pipeline_install","title":"Install 'RAVE' pipelines — pipeline_install","text":"Install 'RAVE' pipelines","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install 'RAVE' pipelines — pipeline_install","text":"","code":"pipeline_install_local(   src,   to = c(\"default\", \"custom\", \"workdir\", \"tempdir\"),   upgrade = FALSE,   force = FALSE,   set_default = NA,   ... )  pipeline_install_github(   repo,   to = c(\"default\", \"custom\", \"workdir\", \"tempdir\"),   upgrade = FALSE,   force = FALSE,   set_default = NA,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install 'RAVE' pipelines — pipeline_install","text":"src pipeline directory installation path; choices 'default', 'custom', 'workdir', 'tempdir'. Please specify pipeline root path via pipeline_root 'custom' used. upgrade whether upgrade dependence; default FALSE stability, however, highly recommended upgrade dependencies force whether force installing pipelines set_default whether set current pipeline module folder default, automatically set pipeline official 'Github' repository. ... parameters used repo 'Github' repository user-repository combination, example, 'rave-ieeg/rave-pipeline'","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_install.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install 'RAVE' pipelines — pipeline_install","text":"nothing","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_install.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install 'RAVE' pipelines — pipeline_install","text":"","code":"if (FALSE) { # \\dontrun{   pipeline_install_github(\"rave-ieeg/pipelines\")   # or download github.com/rave-ieeg/pipelines repository, extract # to a folder, and call pipeline_install_local(\"path/to/pipeline/folder\")  } # }"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_settings_get_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or change pipeline input parameter settings — pipeline_settings_get_set","title":"Get or change pipeline input parameter settings — pipeline_settings_get_set","text":"Get change pipeline input parameter settings","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_settings_get_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or change pipeline input parameter settings — pipeline_settings_get_set","text":"","code":"pipeline_settings_set(   ...,   pipeline_path = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   pipeline_settings_path = file.path(pipeline_path, \"settings.yaml\") )  pipeline_settings_get(   key,   default = NULL,   constraint = NULL,   pipeline_path = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   pipeline_settings_path = file.path(pipeline_path, \"settings.yaml\") )"},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_settings_get_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or change pipeline input parameter settings — pipeline_settings_get_set","text":"pipeline_path root directory pipeline pipeline_settings_path settings file pipeline, must 'yaml' file; default 'settings.yaml' current pipeline key, ... character key(s) get set default default value key missing constraint constraint resulting value; NULL, result must within constraint values, otherwise first element constraint returned. useful make sure results stay within given options","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_settings_get_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or change pipeline input parameter settings — pipeline_settings_get_set","text":"pipeline_settings_set returns list settings. pipeline_settings_get returns value given key.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/pipeline_settings_get_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or change pipeline input parameter settings — pipeline_settings_get_set","text":"","code":"root_path <- tempfile() pipeline_root_folder <- file.path(root_path, \"modules\")  # create pipeline folder pipeline_path <- pipeline_create_template(   root_path = pipeline_root_folder, pipeline_name = \"raveio_demo\",   overwrite = TRUE, activate = FALSE, template_type = \"rmd-bare\")  # Set initial user inputs yaml::write_yaml(   x = list(     n = 100,     pch = 16,     col = \"steelblue\"   ),   file = file.path(pipeline_path, \"settings.yaml\") )  # build the pipeline for the first time # this is a one-time setup pipeline_build(pipeline_path) #> [1] TRUE  # get pipeline settings pipeline_settings_get(   key = \"n\",   pipeline_path = pipeline_path ) #> [1] 100  # get variable with default if missing pipeline_settings_get(   key = \"missing_variable\",   default = \"missing\",   pipeline_path = pipeline_path ) #> [1] \"missing\"  pipeline_settings_set(   missing_variable = \"A\",   pipeline_path = pipeline_path ) #> <Map, size=4, keys=[missing_variable, col, pch, n]>  pipeline_settings_get(   key = \"missing_variable\",   default = \"missing\",   pipeline_path = pipeline_path ) #> [1] \"A\"   unlink(root_path, recursive = TRUE)"},{"path":"http://dipterix.org/ravepipeline/reference/rave-pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level 'RAVE' pipeline functions — rave-pipeline","title":"Low-level 'RAVE' pipeline functions — rave-pipeline","text":"Utility functions 'RAVE' pipelines, currently designed internal development use. infrastructure deployed 'RAVE' future facilitate \"self-expanding\" aim. Please check official 'RAVE' website.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level 'RAVE' pipeline functions — rave-pipeline","text":"","code":"pipeline_root(root_path, temporary = FALSE)  pipeline_list(root_path = pipeline_root())  pipeline_find(name, root_path = pipeline_root())  pipeline_attach(name, root_path = pipeline_root())  pipeline_run(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   scheduler = c(\"none\", \"future\", \"clustermq\"),   type = c(\"smart\", \"callr\", \"vanilla\"),   envir = new.env(parent = globalenv()),   callr_function = NULL,   names = NULL,   async = FALSE,   check_interval = 0.5,   progress_quiet = !async,   progress_max = NA,   progress_title = \"Running pipeline\",   return_values = TRUE,   ... )  pipeline_clean(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   destroy = c(\"all\", \"cloud\", \"local\", \"meta\", \"process\", \"preferences\", \"progress\",     \"objects\", \"scratch\", \"workspaces\"),   ask = FALSE )  pipeline_run_bare(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   scheduler = c(\"none\", \"future\", \"clustermq\"),   type = c(\"smart\", \"callr\", \"vanilla\"),   envir = new.env(parent = globalenv()),   callr_function = NULL,   names = NULL,   return_values = TRUE,   ... )  load_targets(..., env = NULL)  pipeline_target_names(pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"))  pipeline_debug(   quick = TRUE,   env = parent.frame(),   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   skip_names )  pipeline_dep_targets(   names,   skip_names = NULL,   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\") )  pipeline_eval(   names,   env = new.env(parent = parent.frame()),   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   settings_path = file.path(pipe_dir, \"settings.yaml\"),   shortcut = FALSE )  pipeline_visualize(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   glimpse = FALSE,   targets_only = TRUE,   shortcut = FALSE,   zoom_speed = 0.1,   ... )  pipeline_progress(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   method = c(\"summary\", \"details\", \"custom\"),   func = targets::tar_progress_summary )  pipeline_fork(   src = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   dest = tempfile(pattern = \"rave_pipeline_\"),   policy = \"default\",   activate = FALSE,   ... )  pipeline_build(pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"))  pipeline_read(   var_names,   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   branches = NULL,   ifnotfound = NULL,   dependencies = c(\"none\", \"ancestors_only\", \"all\"),   simplify = TRUE,   ... )  pipeline_vartable(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   targets_only = TRUE,   complete_only = FALSE,   ... )  pipeline_hasname(var_names, pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"))  pipeline_watch(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   targets_only = TRUE,   ... )  pipeline_create_template(   root_path,   pipeline_name,   overwrite = FALSE,   activate = TRUE,   template_type = c(\"rmd\", \"r\", \"rmd-bare\", \"rmd-scheduler\", \"rmd-python\") )  pipeline_create_subject_pipeline(   subject,   pipeline_name,   overwrite = FALSE,   activate = TRUE,   template_type = c(\"rmd\", \"r\", \"rmd-python\") )  pipeline_description(file)  pipeline_load_extdata(   name,   format = c(\"auto\", \"json\", \"yaml\", \"csv\", \"fst\", \"rds\"),   error_if_missing = TRUE,   default_if_missing = NULL,   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   ... )  pipeline_save_extdata(   data,   name,   format = c(\"json\", \"yaml\", \"csv\", \"fst\", \"rds\"),   overwrite = FALSE,   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   ... )  pipeline_shared(   pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   callr_function = callr::r )  pipeline_set_preferences(   ...,   .list = NULL,   .pipe_dir = Sys.getenv(\"RAVE_PIPELINE\", \".\"),   .preference_instance = NULL )  pipeline_get_preferences(   keys,   simplify = TRUE,   ifnotfound = NULL,   validator = NULL,   ...,   .preference_instance = NULL )  pipeline_has_preferences(keys, ..., .preference_instance = NULL)"},{"path":"http://dipterix.org/ravepipeline/reference/rave-pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level 'RAVE' pipeline functions — rave-pipeline","text":"root_path root directory pipeline templates temporary whether save paths current pipeline root registry. Set TRUE importing pipelines subject pipeline folders name, pipeline_name pipeline name create; usually also folder pipe_dir, .pipe_dir pipeline directory ; can set via system environment Sys.setenv(\"RAVE_PIPELINE\"=...) scheduler schedule target jobs: default 'none', sequential. multiple heavy-weighted jobs can scheduled time, can choose 'future' 'clustermq' type pipeline executed; current choices \"smart\" enable 'future' package possible, 'callr' use r, 'vanilla' run everything sequentially main session. callr_function function passed tar_make; forced NULL type='vanilla', r type='callr' names names pipeline targets executed; default NULL, runs targets; use pipeline_target_names check available target names. async whether run pipeline without blocking main session check_interval running background (non-blocking mode), often check pipeline progress_title, progress_max, progress_quiet control progress return_values whether return pipeline target values; default true; works pipeline_run_bare ignored pipeline_run ..., .list parameters, targets, etc. destroy part data repository needs cleaned ask whether ask env, envir environment execute pipeline quick whether skip finished targets save time skip_names hint target names fast skip provided --date; used quick=TRUE. missing, skip_names automatically determined settings_path path settings file name within subject's pipeline path shortcut whether display shortcut targets glimpse whether hide network status visualizing pipelines targets_only whether return variable table targets ; default true zoom_speed zoom speed visualizing pipeline dependence method progress presented; choices \"summary\", \"details\", \"custom\". custom method chosen, func called func function call reading customized pipeline progress; default tar_progress_summary src, dest pipeline folder copy pipeline script policy fork policy defined module author, see text file 'fork-policy' pipeline directory; missing, default avoid copying main.html shared folder activate whether activate new pipeline folder dest; default false var_names variable name fetch check branches branch read ; see tar_read ifnotfound default values return variable found dependencies whether load dependent targets, choices 'none' (default, load targets specified names), 'ancestors_only' (load ancestors targets), '' (targets ancestors) simplify whether simplify output complete_only whether show completed --date target variables; default false overwrite whether overwrite existing pipeline; default false users can double-check; true, existing pipeline, including data erased template_type template type create; choices 'r' 'rmd' subject character indicating valid 'RAVE' subject ID, RAVESubject instance file path 'DESCRIPTION' file pipeline folder, pipeline collection folder contains pipeline information, structures, dependencies, etc. format format extended data, default 'json', choices 'yaml', 'fst', 'csv', 'rds' error_if_missing, default_if_missing extended data found data extended data saved .preference_instance internally used keys preference keys validator NULL function validate values","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low-level 'RAVE' pipeline functions — rave-pipeline","text":"pipeline_root root directories pipelines pipeline_list available pipeline names pipeline_root pipeline_find path pipeline pipeline_run PipelineResult instance load_targets list targets build pipeline_target_names vector characters indicating pipeline target names pipeline_visualize widget visualizing target dependence structure pipeline_progress table building progress pipeline_fork normalized path forked pipeline directory pipeline_read value corresponding var_names, named list var_names one element pipeline_vartable table summaries variables; can raise errors pipeline never executed pipeline_hasname logical, whether pipeline variable built pipeline_watch basic shiny application monitor progress pipeline_description list descriptions pipeline pipeline collection","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-snippet.html","id":null,"dir":"Reference","previous_headings":"","what":"'RAVE' code snippets — rave-snippet","title":"'RAVE' code snippets — rave-snippet","text":"Run snippet code","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-snippet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'RAVE' code snippets — rave-snippet","text":"","code":"update_local_snippet(force = TRUE)  install_snippet(path)  list_snippets()  load_snippet(topic, local = TRUE)"},{"path":"http://dipterix.org/ravepipeline/reference/rave-snippet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'RAVE' code snippets — rave-snippet","text":"force whether force updating snippets; default true path installing code snippets locally ; can R script, zip file, directory topic snippet topic local whether use local snippets first requesting online repository","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-snippet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'RAVE' code snippets — rave-snippet","text":"load_snippet returns snippet function, others return nothing","code":""},{"path":"http://dipterix.org/ravepipeline/reference/rave-snippet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'RAVE' code snippets — rave-snippet","text":"","code":"# This example script requires running in an interactive session  if(interactive()){  # ---- Example 1: Install built-in pipeline snippets ------------ update_local_snippet(force = TRUE)  # ---- Example 2: Install customized pipeline snippets ---------- snippets <- file.path(   \"https://github.com/rave-ieeg/rave-gists\",   \"archive/refs/heads/main.zip\",   fsep = \"/\" ) tempf <- tempfile(fileext = \".zip\") utils::download.file(url = snippets, destfile = tempf)  install_snippet(tempf)  }  # ---- List snippets --------------------------------------------  # list all topics list_snippets() #> character(0)   # ---- Run snippets as functions --------------------------------  topic <- \"image-burn-contacts-to-t1\"  # check whether this example can run # This snippet requires installing package `raveio` # which is currently not on CRAN (soon it will)  condition_met <- topic %in% list_snippets() &&   (system.file(package = \"raveio\") != \"\")  if( interactive() && condition_met ) {    snippet <- load_snippet(topic)    # Read snippet documentation   print(snippet)     results <- snippet(     subject_code = \"DemoSubject\",     project_name = \"demo\",     save_path = NA,     blank_underlay = FALSE   )    plot(results) }"},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set/Get 'RAVE' option — raveio-option","title":"Set/Get 'RAVE' option — raveio-option","text":"Persist settings local configuration file","code":""},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set/Get 'RAVE' option — raveio-option","text":"","code":"raveio_setopt(key, value, .save = TRUE)  raveio_resetopt(all = FALSE)  raveio_getopt(key, default = NA, temp = TRUE)  raveio_confpath(cfile = \"settings.yaml\")"},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set/Get 'RAVE' option — raveio-option","text":"key character, option name value character logical length 1, option value .save whether save local drive, internally used temporary change option. recommended use directly. whether reset non-default keys default key found, return default value temp saving, whether key-value pair considered temporary, temporary settings ignored saving; getting options, setting temp false reveal actual settings. cfile file name configuration path","code":""},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set/Get 'RAVE' option — raveio-option","text":"raveio_setopt returns modified value; raveio_resetopt returns current settings list; raveio_confpath returns absolute path settings file; raveio_getopt returns settings value given key, default found.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set/Get 'RAVE' option — raveio-option","text":"raveio_setopt stores key-value pair local path. values persistent shared across multiple sessions. read-keys \"session_string\". Trying set keys result error. following keys reserved 'RAVE': data_dir Directory path, processed data stored; default home directory, folder ~/rave_data/data_dir raw_data_dir Directory path, raw data files stored, mainly original signal files imaging files; default home directory, folder ~/rave_data/raw_dir max_worker Maximum number CPU cores use; default one less total number CPU cores mni_template_root Directory path, 'MNI' templates stored raveio_getopt returns value corresponding keys. key missing, whole option returned. set =TRUE, raveio_resetopt resets keys including non-standard ones. However \"session_string\" never reset.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side-Effects","title":"Set/Get 'RAVE' option — raveio-option","text":"following options alter packages might cause changes behaviors: 'disable_fork_clusters' option change options 'dipsaus..fork' 'dipsaus.cluster.backup', handles parallel computing 'threeBrain_template_subject' option set persist option 'threeBrain.template_subject', changes default group-level template brain.","code":""},{"path":[]},{"path":"http://dipterix.org/ravepipeline/reference/raveio-option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set/Get 'RAVE' option — raveio-option","text":"","code":"# get one RAVE option ncore <- raveio_getopt(\"max_worker\") print(ncore) #> [1] 3  # get all options raveio_getopt() #> $threeBrain_template_subject #> [1] \"N27\" #>  #> $session_string #> [1] \"7fbe6e325447f33\" #>  #> $py_virtualenv #> [1] \"\" #>  #> $py3_path #> [1] \"\" #>  #> $py2_path #> [1] \"\" #>  #> $matlab_path #> [1] \"/Applications/MATLAB_R2016b.app/bin\" #>  #> $suma_nodes_per_electrodes #> [1] 42 #>  #> $server_time_zone #> [1] \"America/Chicago\" #>  #> $max_mem #> 15.6152687072754 #> $disable_fork_clusters #> [1] FALSE #>  #> $max_worker #> [1] 3 #>  #> $disable_startup_speed_check #> [1] FALSE #>  #> $drive_speed #> [1] 50 20 #>  #> $image_height #> [1] 768 #>  #> $image_width #> [1] 1280 #>  #> $fast_cache #> [1] TRUE #>  #> $test_mode #> [1] FALSE #>  #> $delay_input #> [1] 20 #>  #> $module_lookup_file #> [1] \"~/rave_modules/modules.csv\" #>  #> $module_root_dir #> [1] \"~/rave_modules/\" #>  #> $file_structure #> [1] \"native\" #>  #> $bids_data_dir #> [1] \"/home/runner/rave_data/bids_dir/\" #>  #> $data_dir #> [1] \"/home/runner/rave_data/data_dir/\" #>  #> $raw_data_dir #> [1] \"/home/runner/rave_data/raw_dir/\" #>  #> $verbose_level #> [1] \"DEBUG\" #>  #> $tensor_temp_path #> [1] \"~/rave_data/cache_dir/\" #>  #> $..temp #> list() #>   # set option raveio_setopt(\"disable_fork_clusters\", FALSE)"},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline-constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant variables used in 'RAVE' pipeline — ravepipeline-constants","title":"Constant variables used in 'RAVE' pipeline — ravepipeline-constants","text":"Regular expression PIPELINE_FORK_PATTERN defines file matching rules forking pipeline; see pipeline_fork details.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline-constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant variables used in 'RAVE' pipeline — ravepipeline-constants","text":"","code":"PIPELINE_FORK_PATTERN"},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline-constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constant variables used in 'RAVE' pipeline — ravepipeline-constants","text":"object class character length 1.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline_finalize_installation.html","id":null,"dir":"Reference","previous_headings":"","what":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","title":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","text":"official built-pipeline repository located https://github.com/rave-ieeg/rave-pipelines; code snippet repository located https://github.com/rave-ieeg/rave-gists.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline_finalize_installation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","text":"","code":"ravepipeline_finalize_installation(   upgrade = c(\"ask\", \"always\", \"never\", \"config-only\", \"data-only\"),   async = FALSE,   ... )"},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline_finalize_installation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","text":"upgrade rules upgrade dependencies; default ask needed async whether run background; ignore now ... ignored; reserved external calls.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline_finalize_installation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","text":"list built-pipelines installed, function returns nothing.","code":""},{"path":"http://dipterix.org/ravepipeline/reference/ravepipeline_finalize_installation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download 'RAVE' built-in pipelines and code snippets — ravepipeline_finalize_installation","text":"","code":"if (FALSE) { # \\dontrun{  # This function requires connection to the Github, and must run # under interactive session since an user prompt will be displayed  ravepipeline_finalize_installation()  } # }"},{"path":"http://dipterix.org/ravepipeline/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. glue glue promises %...!%, %...>%, %...T!%, %...T>%","code":""},{"path":"http://dipterix.org/ravepipeline/news/index.html","id":"ravepipeline-001","dir":"Changelog","previous_headings":"","what":"ravepipeline 0.0.1","title":"ravepipeline 0.0.1","text":"CRAN release: 2025-03-13 Initial CRAN submission.","code":""}]
